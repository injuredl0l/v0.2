[include mainsail.cfg]
[include include/*.cfg]
#[include BTT_ADXL345/*.cfg]
#[include MELLOW_ADXL345/*.cfg]
[exclude_object]
[resonance_holder]
[include backup.cfg]

[virtual_sdcard]
path: ~/printer_data/gcodes
[display_status]
[pause_resume]

# This file contains common pin mappings for the LDO Leviathan v1.2
#[include testing_macros.cfg]

[mcu]
#####################################################################
# Obtain definition by "ls -l /dev/serial/by-id/"
#####################################################################

serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_33001F000551313133353932-if00
baud: 250000  
is_non_critical: False # if this is true, shit like usb adxl and usb probes can be dc'd without issue


#####################################################################
# Danger klipper options
#####################################################################

[danger_options]
error_on_unused_config_options: True # If an unused config option or section should cause an error


#####################################################################
# Temps
#####################################################################

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

#####################################################################
#  input shaper  definition
#####################################################################
[input_shaper]
##  A frequency (in Hz) of the input shaper for X or Y axis. 
smoother_freq_x: 90.8
smoother_freq_y: 78.2
##  A type of the intput shaper for X or Y axia.
shaper_type_x: smooth_ei
shaper_type_y: smooth_ei


#damping_ratio_x: 0.062
#damping_ratio_y: 0.058
#Damping ratio doesn't work for input smoothers
#####################################################################
# Printer
#####################################################################

[printer]
kinematics: corexy
max_velocity: 600
max_accel: 15000
max_z_velocity: 15
max_z_accel: 100
square_corner_velocity: 15.0


#####################################################################
#      X/Y Stepper Settings
#####################################################################

[stepper_x]
step_pin: PB10
dir_pin: !PB11                                                     
enable_pin: !PG0
rotation_distance: 40
microsteps: 16
full_steps_per_rotation: 200                                        
endstop_pin: tmc5160_stepper_x:virtual_endstop    
position_endstop: 120
position_max: 120
homing_speed: 150
homing_retract_dist: 20
use_sensorless_homing: true
#high_precision_step_compress: true

[tmc5160 stepper_x]
interpolate: False
run_current: 1.6
home_current: 0.8
sense_resistor: 0.075
stealthchop_threshold: 0
cs_pin: PE15
spi_bus: spi4
diag0_pin: ^!PG1

#5160 0-3 ish, glhf
driver_SGT: 1

[stepper_y]
step_pin: PF15
dir_pin: !PF14                                                    # Check motor direction in link above. If inverted, add a ! before PF14
enable_pin: !PE9
rotation_distance: 40
microsteps: 16
full_steps_per_rotation: 200                                        
endstop_pin: tmc5160_stepper_y:virtual_endstop
position_endstop: 120
position_max: 120
homing_speed: 150
homing_retract_dist: 20
use_sensorless_homing: true
#high_precision_step_compress: true

[tmc5160 stepper_y]
interpolate: False
run_current: 1.6
home_current: 0.8
# you need to calculate the run_current value using the equation (rated_motor_current * 0.707 = Maximum_run_current) start with a value that is about 60%-70% of your maximum value.
sense_resistor: 0.075
stealthchop_threshold: 0     
cs_pin: PE11
spi_bus: spi4
diag0_pin: ^!PE10

#driver_SGT is sensorless sensitivity, -64 (63 max) to start calibrating    												
driver_SGT: 1


#####################################################################
#      TMC Autotune
#####################################################################

[autotune_tmc stepper_x]
motor: ldo-35sth52-2004
tuning_goal: performance
voltage: 24
sgt: 2

[autotune_tmc stepper_y]
motor: ldo-35sth52-2004
tuning_goal: performance
voltage: 24
sgt: 2

[motor_constants ldo-35sth52-2004]
#Coil resistance in ohms
resistance: 1.34
#Coil inductance, Henri
inductance: 0.0021
#Holding torque, Nm
holding_torque: 0.40
#Nominal rated current, amps
max_current: 2.00
#Steps per rev (200 for 1.8 steppers)
steps_per_revolution: 200
#####################################################################
#   Z Stepper Settings
#####################################################################

[stepper_z]
step_pin: PD4
dir_pin: PD3                                                    # Remove the ! before PD3 if motor direction is inverted.
enable_pin: !PD7
rotation_distance: 8                                                # For T8x8 integrated lead screw
microsteps: 32
endstop_pin: ^PC3                                          #Maybe remove !
#position_endstop: 120
position_max: 120
position_min: -6
homing_speed: 15
second_homing_speed: 5
homing_retract_dist: 3.0


[tmc2209 stepper_z]
uart_pin: PD5
interpolate: False
run_current: 0.30
sense_resistor: 0.110
stealthchop_threshold: 999999                                            # Set to 999999 to turn stealthchop on, and 0 to use spreadcycle


#####################################################################
#   Extruder
#####################################################################

[extruder]
step_pin: PD10
dir_pin: PD9                                                     # Add ! if moving opposite direction
enable_pin: !PD13
microsteps: 16               #if error, make lower, if not error, profit   run highest mcu /host  can handle
full_steps_per_rotation: 200
rotation_distance: 4.637
nozzle_diameter: 0.50                              
filament_diameter: 1.750
heater_pin: PG10                                   
sensor_type:  PT1000
sensor_pin: PA2                                   
#control: pid                                             
min_temp: 20
max_temp: 300
min_extrude_temp: 25
max_extrude_only_distance: 500
max_extrude_only_velocity: 120                      
pullup_resistor: 2200
max_extrude_cross_section: 5  #for kamp
max_power: 1.0


[tmc2209 extruder]
uart_pin: PD11
diag_pin: ^PD12
interpolate: true
run_current: 0.80 #**
sense_resistor: 0.110 #**
stealthchop_threshold: 0
driver_TBL: 0
driver_HEND: 6
driver_HSTRT: 7
driver_TOFF: 4

#####################################################################
#   Bed Heater
#####################################################################

[heater_bed]
heater_pin: PG11
sensor_type: Generic 3950
sensor_pin: PA1
pullup_resistor: 2200
smooth_time: 3.0
#max_power: 0.6                                                     # Only needed for 100w pads
min_temp: 0
max_temp: 120
#control: pid                                                        # Do PID calibration after initial checks
#pid_kp: 68.453
#pid_ki: 2.749
#pid_kd: 426.122

#####################################################################
# Chamber sensor
#####################################################################
[temperature_sensor chamber]
sensor_type:  PT1000
sensor_pin: PA0
pullup_resistor: 2200
min_temp: 0
max_temp: 500

#####################################################################
# Fan Control
#####################################################################

[heater_fan hotend_fan]
pin: PB3                                                  
max_power: 1.0
kick_start_time: 0.5
heater: extruder                                               
heater_temp: 50.0                                                   
tachometer_pin: PB4
tachometer_ppr: 2
tachometer_poll_interval: 0.0009


[fan]
pin: PB7                                                      
max_power: 1.0
kick_start_time: 0.5                                                # Depending on your fan, you may need to increase this value if your fan will not start
cycle_time: 0.010

[fan_generic BedFans]
pin: PF9
max_power: 1.0
#cycle_time: 0.05
kick_start_time: 0.5


[temperature_fan raspberry_pi_fan]
pin: PF7
max_power: 1.0
shutdown_speed: 0.0
control: watermark
max_delta: 5.0
sensor_type: temperature_host
min_temp: 0
max_temp: 100
target_temp: 45.0
tachometer_pin: PF6
tachometer_ppr: 2
tachometer_poll_interval: 0.0009
max_speed: 0.99




#####################################################################
# Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 1800

[homing_override]
axes: xyz
gcode:
  {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
  
  ; Capture current fan speed and turn off fan
  {% set fan_speed_before_homing = printer.fan.speed * 255 %}
  M106 S0 ; Turn off fan before homing

  {% if "z" not in printer.toolhead.homed_axes %}
    FORCE_MOVE STEPPER=stepper_z DISTANCE=5 VELOCITY=10
  {% elif printer.toolhead.position.z|float < 5|float %}
    G90
    G0 Z5 F600
  {% endif %}

  {% if home_all or 'X' in params %}
    G28 X
    G4 P500 ; Wait 500ms after X homing
    G1 X60 F6000 ; Move to X=60 if homed
  {% endif %}
  
  {% if home_all or 'Y' in params %}
    G28 Y
    G4 P500 ; Wait 500ms after Y homing
    G1 Y60 F6000 ; Move to Y=60 if homed
  {% endif %}
  
  {% if home_all or 'Z' in params %}
    G90
    G28 Z
    G4 P500 ; Wait 500ms after Z homing
    G1 Z30
  {% endif %}

  ; Restore fan to previous speed
  M106 S{fan_speed_before_homing}



## To be used with BED_SCREWS_ADJUST
[bed_screws]
screw1: 60,5
screw1_name: front screw
screw2: 5,115
screw2_name: back left
screw3: 115,115
screw3_name: back right

#####################################################################
# Neopixels
#####################################################################

[neopixel bed_neopixel]
pin: PF10
chain_count: 8
color_order: GRB
initial_RED: 1.0
initial_GREEN: 0
initial_BLUE: 0

#####################################################################
# Skew
#####################################################################
[skew_correction]

#####################################################################
# Macros
#####################################################################
[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E30 F300                    ; load
   G1 E15 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-40 F1800                  ; retract some, but not too much or it will jam
   M82                            ; set extruder to absolute

[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min } Y{y_min } Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED



[include moonraker_obico_macros.cfg]

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(25)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        #M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# pid_version = 1
#*# pid_target = 110.00
#*# pid_tolerance = 0.0200
#*# control = pid
#*# pid_kp = 28.666
#*# pid_ki = 1.761
#*# pid_kd = 116.635
#*#
#*# [extruder]
#*# pid_version = 1
#*# pid_target = 270.00
#*# pid_tolerance = 0.0200
#*# pid_kp = 18.086
#*# pid_ki = 1.297
#*# pid_kd = 63.070
#*# control = pid
#*#
#*# [stepper_z]
#*# position_endstop = 110.350
#*#
#*# [skew_correction Test1]
#*# xy_skew = 0.0006062451309190161
#*# xz_skew = 0.0
#*# yz_skew = 0.0
